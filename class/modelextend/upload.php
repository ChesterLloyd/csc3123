<?php
/**
 * A trait that allows extending the model class for the RedBean object Upload
 *
 * Add any new methods you want the Uploadbean to have here.
 *
 * @author Lindsay Marshall <lindsay.marshall@ncl.ac.uk>
 * @copyright 2018-2019 Newcastle University
 *
 */
    namespace ModelExtend;
/**
 * Upload table stores info about files that have been uploaded...
 */
    trait Upload
    {
/**
 * Determine if a user can access the file
 *
 * At the moment it is either the user or any admin that is allowd. Rewrite the
 * method to add more complex access control schemes.
 *
 * @param object	$user	A user object
 *
 * @return bool
 */
        public function canaccess($user) : bool
        {
            return $this->bean->user->equals($user) || $user->isadmin();
        }
/**
 * Store a file
 *
 * This is the basic functionality assumed by the framework. You can adapt this by changing this function.
 * Best though if you only add functionality :-)
 *
 * @param \Support\Context	$context	The context object for the site
 * @param array             $da     	The relevant $_FILES element (or similar generated by FormData)
 * @param bool       	    $public		If TRUE then store in the public directory
 * @param ?object	        $owner		The user who owns the upload. If NULL then  the currently logged in user
 * @param int               $index      If there is an array of files possibly with other data, then this is the index in the array.
 *
 * @return bool
 */
        public function savefile(Context $context, array $da, bool $public, $owner = NULL, $index = 0) : bool
        {
            if ($da['size'] == 0 || $da['error'] != UPLOAD_ERR_OK)
            { # 0 length file or there was an error so ignore
                return FALSE;
            }
            if (!$public && !is_object($owner))
            {
                if (!$context->hasuser())
                { # no logged in user! This should never happen...
                    throw new \Exception('No user');
                }
                $owner = $context->user();
            }
            $dir = getcwd();
            chdir($context->local()->basedir());
            $pname = [$public ? 'public' : 'private', is_object($owner) ? $owner->getID() : 0, date('Y'), date('m')];
            foreach ($pname as $pd)
            { # walk the path cding and making if needed
                $this->mkch($pd);
            }
            $fname = uniqid('', TRUE).'.'.pathinfo($da['name'], PATHINFO_EXTENSION);
            if (!@move_uploaded_file($da['tmp_name'], $fname))
            {
                @chdir($dir);
                throw new \Exception('Cannot move uploaded file to '.$fname);
            }
            $this->bean->added = \R::isodatetime();
            $pname[] = $fname;
            $this->bean->fname = DIRECTORY_SEPARATOR.implode(DIRECTORY_SEPARATOR, $pname);
            $this->bean->filename = $da['name'];
            $this->bean->public = $public ? 1: 0;
            $this->bean->user = $owner;
            \R::store($this->bean);
            if (!@chdir($dir))
            { # go back to where we were in the file system
                throw new \Exception('Cannot chdir to '.$dir);
            }
            return TRUE;
        }
    }
?>